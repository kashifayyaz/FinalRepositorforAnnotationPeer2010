
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.apache.lucene.queryParser.ParseException;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PeerInterface.java
 *
 * Created on 12 27, 09, 7:11:52 PM
 */

/**
 *
 * @author kashif
 */
public class PeerInterface extends javax.swing.JFrame {

        HibernateActions ha;
        List<Annotation> universalList;
    /** Creates new form PeerInterface */
    public PeerInterface() throws NoSuchAlgorithmException, Exception {
        initComponents();
         ha= new HibernateActions();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        description = new javax.swing.JTextField();
        semToAnn = new javax.swing.JTextField();
        resourceURL = new javax.swing.JTextField();
        annAuthor = new javax.swing.JTextField();
        save = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        readRDF = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        searchByAuthor = new javax.swing.JButton();
        searchByResourceUrl = new javax.swing.JButton();
        searchBySemantics = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        searchMultipleFields = new javax.swing.JButton();
        wildCardQuery = new javax.swing.JButton();
        phraseQuery = new javax.swing.JButton();
        jCheckBox5 = new javax.swing.JCheckBox();
        prefixQuery = new javax.swing.JButton();
        termQuery = new javax.swing.JButton();
        rangeQuery = new javax.swing.JButton();
        createRDF = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Annotation Author");

        jLabel5.setText("Resource URL");

        jLabel6.setText("Semantics to Annotation");

        jLabel7.setText("Description");

        resourceURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resourceURLActionPerformed(evt);
            }
        });

        annAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annAuthorActionPerformed(evt);
            }
        });

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        jButton1.setText("Create Database");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        readRDF.setText("Read RDF");
        readRDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readRDFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel1))
                        .addGap(64, 64, 64)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(resourceURL, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(description, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(semToAnn, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(annAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(jButton1)
                        .addGap(76, 76, 76)
                        .addComponent(save)
                        .addGap(88, 88, 88)
                        .addComponent(readRDF)))
                .addContainerGap(1751, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(171, 171, 171)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(annAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resourceURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(semToAnn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(description, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(158, 158, 158)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save)
                    .addComponent(jButton1)
                    .addComponent(readRDF))
                .addContainerGap(3153, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Add Annotation Data", jPanel2);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel2.setText("Enter your Search Query");

        searchByAuthor.setText("Search by Author");
        searchByAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByAuthorActionPerformed(evt);
            }
        });

        searchByResourceUrl.setText("Search by Resource URL");
        searchByResourceUrl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByResourceUrlActionPerformed(evt);
            }
        });

        searchBySemantics.setText("Search by Semantics");
        searchBySemantics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBySemanticsActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jDesktopPane1.setBackground(new java.awt.Color(0, 204, 204));

        jCheckBox1.setText("Annotation Author");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jCheckBox1.setBounds(20, 80, 140, 23);
        jDesktopPane1.add(jCheckBox1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jCheckBox2.setText("Resource URL");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        jCheckBox2.setBounds(20, 120, 140, 23);
        jDesktopPane1.add(jCheckBox2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jCheckBox3.setText("Semantic to Annotation");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });
        jCheckBox3.setBounds(20, 170, 140, 23);
        jDesktopPane1.add(jCheckBox3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jCheckBox4.setText("Creation Time");
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });
        jCheckBox4.setBounds(20, 220, 140, 23);
        jDesktopPane1.add(jCheckBox4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        searchMultipleFields.setText("Search Multiple Fields");
        searchMultipleFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchMultipleFieldsActionPerformed(evt);
            }
        });
        searchMultipleFields.setBounds(200, 50, 150, 23);
        jDesktopPane1.add(searchMultipleFields, javax.swing.JLayeredPane.DEFAULT_LAYER);

        wildCardQuery.setText("Wild Card Query");
        wildCardQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wildCardQueryActionPerformed(evt);
            }
        });
        wildCardQuery.setBounds(200, 100, 150, 23);
        jDesktopPane1.add(wildCardQuery, javax.swing.JLayeredPane.DEFAULT_LAYER);

        phraseQuery.setText("Search Phrase Query");
        phraseQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phraseQueryActionPerformed(evt);
            }
        });
        phraseQuery.setBounds(203, 150, 150, 23);
        jDesktopPane1.add(phraseQuery, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jCheckBox5.setText("Description");
        jCheckBox5.setToolTipText("Description field will be helpfull in searching via Prase Query only");
        jCheckBox5.setBounds(20, 270, 140, 23);
        jDesktopPane1.add(jCheckBox5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        prefixQuery.setText("Search Prefix Query");
        prefixQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prefixQueryActionPerformed(evt);
            }
        });
        prefixQuery.setBounds(210, 200, 150, 23);
        jDesktopPane1.add(prefixQuery, javax.swing.JLayeredPane.DEFAULT_LAYER);

        termQuery.setText("Search Term Query");
        termQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                termQueryActionPerformed(evt);
            }
        });
        termQuery.setBounds(210, 250, 140, 23);
        jDesktopPane1.add(termQuery, javax.swing.JLayeredPane.DEFAULT_LAYER);

        rangeQuery.setText("Range Query");
        rangeQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rangeQueryActionPerformed(evt);
            }
        });
        rangeQuery.setBounds(210, 300, 140, 23);
        jDesktopPane1.add(rangeQuery, javax.swing.JLayeredPane.DEFAULT_LAYER);

        createRDF.setText("Create RDF");
        createRDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRDFActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Results");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Advanced Search Options");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(198, 198, 198)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(14, 14, 14)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(62, 62, 62)
                                        .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(226, 226, 226)
                                        .addComponent(createRDF, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(searchByAuthor)
                                .addGap(3, 3, 3)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(searchByResourceUrl)
                                        .addGap(31, 31, 31)
                                        .addComponent(searchBySemantics)))
                                .addGap(204, 204, 204)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(1350, 1350, 1350))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchByAuthor)
                            .addComponent(searchByResourceUrl)
                            .addComponent(searchBySemantics))
                        .addGap(46, 46, 46)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(createRDF)))
                .addContainerGap(2900, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Search", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 2342, Short.MAX_VALUE)
                .addGap(561, 561, 561))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void annAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annAuthorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_annAuthorActionPerformed

    private void resourceURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resourceURLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resourceURLActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        if(resourceURL.getText().equals(null) || resourceURL.getText().equals(""))
        {
            JOptionPane.showMessageDialog(rootPane, "Enter Resource URL ");
            return;
        }
        if(annAuthor.getText().equals(null) || annAuthor.getText().equals(""))
        {
        JOptionPane.showMessageDialog(rootPane, "Enter Email of Annotation Author ");
            return;
        }
        if(semToAnn.getText().equals(null) || semToAnn.getText().equals(""))
        {
            JOptionPane.showMessageDialog(rootPane, "Enter Semantics to Annoation ");
            return;
        }

        LinkedList dataList = new LinkedList();
        dataList.add(new String(resourceURL.getText().trim()));
        dataList.add(new String(description.getText().trim()));
        dataList.add(new String(annAuthor.getText().trim()));
        dataList.add(new String(semToAnn.getText().trim()));
        
        try {
             ha.populateTables(dataList);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(rootPane, "Data Saved succesfully");
        resourceURL.setText("");
        annAuthor.setText("");
        semToAnn.setText("");
        description.setText("");
    }//GEN-LAST:event_saveActionPerformed
public void print(List<Annotation> results){
        universalList = null;
        universalList = results;
       jTextArea2.append("# matching records: " + results.size());
       for (Annotation ann : results) {
        Set<AnnotationChild> myset = ann.getQueryData();
        jTextArea2.append("\n"+"Annotation ID = "+ ann.getAnnID());
        jTextArea2.append("\n"+"Resource URL = "+ ann.getResourceURL());
        jTextArea2.append("\n"+"Description = "+ ann.getDescription());
        jTextArea2.append("\n"+"Creation Time = "+ ann.getCreationTime());
        jTextArea2.append("\n"+"Annotation Author = "+ ann.getAnnotationAuthor());
        jTextArea2.append("\n"+"Semantics to Annotation = "+ ann.getSemToAnn());
        jTextArea2.append("\n"+"File Location = "+ ann.getFileLocation());
//             for(AnnotationChild annChild : myset){
//                jTextArea2.append("\n" +"Child ID = "+annChild.getChildId());
//                jTextArea2.append("\n" +"Query is = "+annChild.getQueryTerm());
//                jTextArea2.append("\n" +"Text is  = "+annChild.getText());
//                jTextArea2.append("\n" +"Concept is = "+annChild.getConcept()+"\n");
//            }
    }
     
   }
   
    private void searchByResourceUrlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByResourceUrlActionPerformed
        String field = "resourceURL";
        List<Annotation> results = null;
         if(jTextArea1.getText().equals(null) || jTextArea1.getText().equals(""))
        {
            JOptionPane.showMessageDialog(rootPane, "Enter Search Query please");
            return;
        }
        String searchQuery = new String(jTextArea1.getText().trim());
        jTextArea2.setText("           Results based on ResourceURL"+"\n"+"\n");
        try {
            results = ha.analyzeSingleField(field, searchQuery);
            print(results);
        } catch (IOException ex) {
            Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_searchByResourceUrlActionPerformed

   
    private void searchBySemanticsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBySemanticsActionPerformed
        String field = "semToAnn";
        List<Annotation> results = null;
         if(jTextArea1.getText().equals(null) || jTextArea1.getText().equals(""))
        {
            JOptionPane.showMessageDialog(rootPane, "Enter Search Query please");
            return;
        }
        String searchQuery = new String(jTextArea1.getText().trim());
        jTextArea2.setText("           Results based on Semantic to Annotation"+"\n"+"\n");
        try {
            results = ha.analyzeSingleField(field, searchQuery);
            print(results);
        } catch (IOException ex) {
            Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_searchBySemanticsActionPerformed

    private void searchByAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByAuthorActionPerformed
        String field = "annotationAuthor";
        List<Annotation> results = null;
         if(jTextArea1.getText().equals(null) || jTextArea1.getText().equals(""))
        {
            JOptionPane.showMessageDialog(rootPane, "Enter Search Query please");
            return;
        }
        String searchQuery = new String(jTextArea1.getText().trim());
        jTextArea2.setText("           Results based on Annotation Author"+"\n"+"\n");
        try {
            results = ha.analyzeSingleField(field, searchQuery);
            print(results);
        } catch (IOException ex) {
            Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_searchByAuthorActionPerformed

    private void searchMultipleFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchMultipleFieldsActionPerformed
      
      ArrayList arraylist = new ArrayList();
      String[] fields = null;
      
     if(jCheckBox1.isSelected()){
         arraylist.add("annotationAuthor");
         }
      if(jCheckBox2.isSelected()){
         arraylist.add("resourceURL");
         }
      if(jCheckBox3.isSelected()){
         arraylist.add("semToAnn");
      }
      if(jCheckBox4.isSelected()){
         arraylist.add("creationTime");
      }
      fields = new String[arraylist.size()];
     for(int j = 0; j < arraylist.size(); j++){
         //jTextArea2.append("\n"+arraylist.get(j).toString());
         fields[j] = arraylist.get(j).toString();
         System.out.println("fields: "+fields[j]);
     }
     arraylist = null;

        List<Annotation> results = null;
         if(jTextArea1.getText().equals(null) || jTextArea1.getText().equals(""))
        {
            JOptionPane.showMessageDialog(rootPane, "Enter Search Query please");
            return;
        }
        StringTokenizer st = new StringTokenizer(jTextArea1.getText().trim());
        LinkedList linklist = new LinkedList();
        while(st.hasMoreTokens()){
            linklist.add(st.nextToken(":"));
        }
        String[] queries = new String[linklist.size()];
        for(int j = 0; j < linklist.size(); j++){
         //jTextArea2.append("\n"+arraylist.get(j).toString());
         queries[j] = linklist.get(j).toString();
         System.out.println("queries: "+queries[j]);
        }
        if(queries.length != fields.length){
            JOptionPane.showMessageDialog(rootPane, "Length of Queries should be equal to length of fields selected");
            return;
        }
        jTextArea2.setText("           Results based on Multiple Fields Search"+"\n"+"\n");
        try {
            results = ha.analyzeMultipleFields(fields, queries);
            print(results);
        } catch (IOException ex) {
            Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_searchMultipleFieldsActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void wildCardQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wildCardQueryActionPerformed
        // TODO add your handling code here:
      String field = null;
      int i  = 0;
     if(jCheckBox1.isSelected()){
         field = "annotationAuthor";
         i++;
         }
      if(jCheckBox2.isSelected()){
         field = "resourceURL";
         i++;
         }
      if(jCheckBox3.isSelected()){
         field = "semToAnn";
         i++;
      }
      if(jCheckBox4.isSelected()){
         field = "creationTime";
         i++;
      }
      if(i != 1){
          JOptionPane.showMessageDialog(rootPane, "You can select only one field for Wild Card Search operation");
            return;
      }

      List<Annotation> results = null;
         if(jTextArea1.getText().equals(null) || jTextArea1.getText().equals(""))
        {
            JOptionPane.showMessageDialog(rootPane, "Enter Wild Card Search Query please");
            return;
        }
        String query = jTextArea1.getText().trim();

        jTextArea2.setText("           Results based on Wild Card Search"+"\n"+"\n");
        try {
           results = ha.analyzeWildCardQuery(field, query);
           print(results);
        }// end of try
        catch (SQLException ex) {
            Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_wildCardQueryActionPerformed

    private void phraseQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phraseQueryActionPerformed
        // TODO add your handling code here:
        String field = null;
      int i  = 0;
      if(jCheckBox1.isSelected()){
         field = "annotationAuthor";
         i++;
         }
      if(jCheckBox2.isSelected()){
         field = "resourceURL";
         i++;
         }
      if(jCheckBox3.isSelected()){
         field = "semToAnn";
         i++;
      }
      if(jCheckBox4.isSelected()){
         field = "creationTime";
         i++;
      }
      if(jCheckBox5.isSelected()){
         field = "description";
         i++;
      }

      if(i != 1){
          JOptionPane.showMessageDialog(rootPane, "You can select only one field for Phrase Search operation");
            return;
      }

      List<Annotation> results = null;
         if(jTextArea1.getText().equals(null) || jTextArea1.getText().equals(""))
        {
            JOptionPane.showMessageDialog(rootPane, "Enter Phrase Search Query please");
            return;
        }
        String query = jTextArea1.getText().trim();

        jTextArea2.setText("           Results based on Phrase Search"+"\n"+"\n");
        try {
           results = ha.analyzePhraseQuery(field, query);
          print(results);
        }// end of try
        catch (SQLException ex) {
            Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_phraseQueryActionPerformed

    private void prefixQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prefixQueryActionPerformed
        // TODO add your handling code here:
        String field = null;
      int i  = 0;
      if(jCheckBox1.isSelected()){
         field = "annotationAuthor";
         i++;
         }
      if(jCheckBox2.isSelected()){
         field = "resourceURL";
         i++;
         }
      if(jCheckBox3.isSelected()){
         field = "semToAnn";
         i++;
      }
      if(jCheckBox4.isSelected()){
         field = "creationTime";
         i++;
      }
      if(jCheckBox5.isSelected()){
         field = "description";
         i++;
      }

      if(i != 1){
          JOptionPane.showMessageDialog(rootPane, "You can select only one field for Prefix Search operation");
            return;
      }

      List<Annotation> results = null;
         if(jTextArea1.getText().equals(null) || jTextArea1.getText().equals(""))
        {
            JOptionPane.showMessageDialog(rootPane, "Enter Prefix Search Query please");
            return;
        }
        String query = jTextArea1.getText().trim();

        jTextArea2.setText("           Results based on Prefix Search"+"\n"+"\n");
        try {
           results = ha.analyzePrefixQuery(field, query);
           jTextArea2.append("# matching records: " + results.size());
        print(results);
        }// end of try
        catch (SQLException ex) {
            Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_prefixQueryActionPerformed

    private void termQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_termQueryActionPerformed
        // TODO add your handling code here:
        String field = null;
      int i  = 0;
      if(jCheckBox1.isSelected()){
         field = "annotationAuthor";
         i++;
         }
      if(jCheckBox2.isSelected()){
         field = "resourceURL";
         i++;
         }
      if(jCheckBox3.isSelected()){
         field = "semToAnn";
         i++;
      }
      if(jCheckBox4.isSelected()){
         field = "creationTime";
         i++;
      }
      if(jCheckBox5.isSelected()){
         field = "description";
         i++;
      }

      if(i != 1){
          JOptionPane.showMessageDialog(rootPane, "You can select only one field for Term Query Search operation");
            return;
      }

      List<Annotation> results = null;
         if(jTextArea1.getText().equals(null) || jTextArea1.getText().equals(""))
        {
            JOptionPane.showMessageDialog(rootPane, "Enter Term Search Query please");
            return;
        }
        String query = jTextArea1.getText().trim();

        jTextArea2.setText("           Results based on Term Query Search"+"\n"+"\n");
        try {
           results = ha.analyzeTermQuery(field, query);
           jTextArea2.append("# matching records: " + results.size());
        print(results);
        }// end of try
        catch (SQLException ex) {
            Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_termQueryActionPerformed

    private void rangeQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rangeQueryActionPerformed
        // TODO add your handling code here:
      String field = null;
      if(jCheckBox4.isSelected()){
         field = "creationTime";
      }
        List<Annotation> results = null;
         if(jTextArea1.getText().equals(null) || jTextArea1.getText().equals(""))
        {
            JOptionPane.showMessageDialog(rootPane, "Enter Search Query please");
            return;
        }
        StringTokenizer st = new StringTokenizer(jTextArea1.getText().trim());
        String[] query = new String[2];
        int i = 0;
        while(st.hasMoreTokens()){
            query[i] = st.nextToken("TO").trim();
            i++;
        }

        for(int j = 0; j < query.length; j++){
         System.out.println("queries: "+query[j]);
        }
        //String query = jTextArea1.getText().trim();
         jTextArea2.setText("           Results based on Range Query Search"+"\n"+"\n");
        try {
            results = ha.analyzeRangeQuery(field, query);
            print(results);
        } catch (ParseException ex) {
            Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }//GEN-LAST:event_rangeQueryActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int a;
        a = JOptionPane.showConfirmDialog(rootPane, "All tables will be deleted if they exist and new will be setup");
        if(a == 0){
            ha.setUpDB();
            JOptionPane.showMessageDialog(rootPane, "Tables has been created");
        }
        else {
            System.out.println("do nothing");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void createRDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRDFActionPerformed
        // TODO add your handling code here:
       try{
        String query = jTextArea1.getText().trim();
        String concept1 = null;
        String text1 = null;
        LinkedList uuid = new LinkedList();
        LinkedList querylist = new LinkedList();
        List<Annotation> results = universalList;
        System.out.println("list size"+ results.size());
        if(results.size() > 0){
            int i = 1;
        for (Annotation ann : results) {
            uuid.add(ann.getAnnID());
            if(i >1){break;}
            i++;
        }
        concept1 = JOptionPane.showInputDialog("Enter Concept value for Query detail to save");
        text1 = JOptionPane.showInputDialog("Enter Text value for Query detail to save");
        
        querylist.add(query);
        querylist.add(concept1);
        querylist.add(text1);
        System.out.println("query = "+querylist.get(0));
        System.out.println("concept = "+querylist.get(1));
        System.out.println("text = "+querylist.get(2));
        
        try {
                    ha.populateAnnotation_Child(uuid,querylist);
                    RDFHandeling.createRDF(results,querylist);

                } catch (Exception ex) {
                    Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
        }// end of if
       }
       catch(NullPointerException e){
           JOptionPane.showMessageDialog(rootPane, "Execute the query first");
           return;
       }
       JOptionPane.showMessageDialog(rootPane, "Values saved in DB and RDF file is created on root location of C drive with name 'test.n3'");
}//GEN-LAST:event_createRDFActionPerformed

    private void readRDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readRDFActionPerformed
        // TODO add your handling code here:
        LinkedList list = new LinkedList();
        list = RDFHandeling.readRDF();
        try {
            ha.populateBothTables(list);
        } catch (Exception ex) {
            Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_readRDFActionPerformed
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new PeerInterface().setVisible(true);
                    
                   } catch (NoSuchAlgorithmException ex) {
                    Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(PeerInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField annAuthor;
    private javax.swing.JButton createRDF;
    private javax.swing.JTextField description;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JButton phraseQuery;
    private javax.swing.JButton prefixQuery;
    private javax.swing.JButton rangeQuery;
    private javax.swing.JButton readRDF;
    private javax.swing.JTextField resourceURL;
    private javax.swing.JButton save;
    private javax.swing.JButton searchByAuthor;
    private javax.swing.JButton searchByResourceUrl;
    private javax.swing.JButton searchBySemantics;
    private javax.swing.JButton searchMultipleFields;
    private javax.swing.JTextField semToAnn;
    private javax.swing.JButton termQuery;
    private javax.swing.JButton wildCardQuery;
    // End of variables declaration//GEN-END:variables

}
